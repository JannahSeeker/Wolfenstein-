function gs = initGameState()
%INITGAMESTATE  Build and return the master GameState struct.
%
%   gs = initGameState();
%
%   Creates all sub‑structs (player, mapManager, spriteManager, …) and
%   bundles them into one handle‑less struct suitable for passing to the
%   parallel‑loop functions.

% initGameState.m

%% 1) Player Struct
player = struct( ...
    'position',    [0, 0, 0], ...    % [x, y,z]
    'angle',       0.0,   ...     % facing direction (radians)
    'health',      100.0, ...     % starting health
    'mana',        0.0,   ...     % starting mana
    'hasKey',      false, ...     % are they holding the key?
    'speed',       5.0 ...        % movement units per second
);

%% 2) MapManager Struct
mapHeight   = 20;
mapWidth    = 30;
numFloors   = 3;
maps3D      = zeros(mapHeight, mapWidth, numFloors, 'uint8');  
% (Fill each slice maps3D(:,:,f) with your tile IDs)

% Define elevator and chest locations as N×3 arrays of [x,y,z]
elevators = [  5, 10, 1;    % elevator at (5,10) on floor 1
              15,  8, 2 ];  % elevator at (15,8) on floor 2

chests    = [ 10,  4, 1;    % chest at (10,4) on floor 1
              12, 17, 2;    % chest at (12,17) on floor 2
               3, 19, 3 ];  % chest at (3,19) on floor 3

mapManager = struct( ...
    'maps',         maps3D, ...    
    'currentFloor', 1,    ...       % starting on floor 1
    'elevators',    elevators, ...
    'chests',       chests ...
);
 
%% 3) KeyManager Struct
keyManager = struct( ...
    'keyPosition', [2, 3,0], ...    % initial spawn [x,y]
    'isHeld',      false, ...
    'animFrame',   0 ...           % added animFrame for key
);

%% 4) Sprite & SpriteManager
Sprite = @(pos,typeID,state,animFrame,aiBrain) struct( ...
    'pos',       pos, ...
    'typeID',    uint16(typeID), ...
    'state',     state, ...
    'animFrame', int32(animFrame), ...
    'aiBrain',   aiBrain ...      % e.g. 'DirectChaser'
);

% Example sprites array
sprites = [ ...
    Sprite([5,5,0], 1, 'Idle', 0, 'DirectChaser'), ...
    Sprite([8,2,0], 2, 'Idle', 0, 'WallAvoidingGhost') ...
];

spriteManager = struct( ...
    'sprites', sprites ...
);

%% 5) InputManager Struct
inputManager = struct( ...
    'joystick',  [0, 0], ...      % [x,y] from readValue()
    'shoot',     false, ...
    'dropKey',   false, ...
    'interact',  false, ...
    'deadzone',  0.1 ...
);

%% 6) CollisionDetector (stateless placeholder)
collisionDetector = struct();

%% 7) RenderEngine (stateless wrapper)
renderEngine = struct();

%% 8) AudioManager (stateless)
audioManager = struct( ...
    'pendingSounds', uint8([]) ... % added pendingSounds for audio management
);

%% 9) HUDManager (stateless)
hudManager = struct();

%% 10) AssetManager (lookup tables)
assetManager = struct( ...
    'textureIDs',   uint16([]), ...
    'animationMap', int32([]) ...
);

%% 11) Master GameState Struct
gameState = struct( ...
    'player',           player, ...
    'mapManager',       mapManager, ...
    'spriteManager',    spriteManager, ...
    'keyManager',       keyManager, ...
    'inputManager',     inputManager, ...
    'collisionDetector',collisionDetector, ...
    'renderEngine',     renderEngine, ...
    'audioManager',     audioManager, ...
    'hudManager',       hudManager, ...
    'assetManager',     assetManager, ...
    'running',          true,  ...
    'renderPeriod',     1/60,  ...
    'logicPeriod',      1/30,  ...
    'inputPeriod',      1/100  ...
);
gs = gameState;
end